// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  superadmin
  author
}

enum TransferType {
  send
  return
}

model User {
  id                  Int       @id @default(autoincrement())
  first_name          String
  last_name           String
  country             String    @default("MÃ©xico")
  referido            String?
  email               String?   @unique
  password            String?
  category            Category? @relation(fields: [categoryId], references: [id])
  categoryId          Int?
  books               Book[]
  role                Role      @default(author)
  reset_password_code Int?
  isDeleted           Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  payments            Payment[]

  @@unique([first_name, last_name])
}

model Book {
  id          Int          @id @default(autoincrement())
  title       String
  pasta       String?
  price       Float?       @default(199.99)
  isbn        String?      @unique
  users       User[]
  inventories Inventory[]
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  impressions Impression[]
}

model Category {
  id                           Int      @id @default(autoincrement())
  type                         String   @unique
  percentage_royalties         Float
  percentage_management_stores Float
  management_min               Float
  users                        User[]
  isDeleted                    Boolean  @default(false)
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
}

model Bookstore {
  id              Int         @id @default(autoincrement())
  name            String
  deal_percentage Float?
  contact_name    String?
  contact_phone   String?
  contact_email   String?
  inventories     Inventory[]
  color           String?     @default("#E2E2E2")
  isDeleted       Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Inventory {
  id            Int        @id @default(autoincrement())
  book          Book       @relation(fields: [bookId], references: [id])
  bookId        Int
  bookstore     Bookstore  @relation(fields: [bookstoreId], references: [id])
  bookstoreId   Int
  country       String
  initial       Int
  current       Int
  returns       Int        @default(0)
  givenToAuthor Int        @default(0)
  sales         Sale[]
  isDeleted     Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  transfersFrom Transfer[] @relation("TransfersFrom")
  transfersTo   Transfer[] @relation("TransfersTo")

  @@unique([bookId, bookstoreId, country])
}

model Sale {
  id          Int       @id @default(autoincrement())
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId Int
  quantity    Int       @default(1)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Impression {
  id        Int      @id @default(autoincrement())
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  quantity  Int
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transfer {
  id              Int          @id @default(autoincrement())
  fromInventory   Inventory    @relation("TransfersFrom", fields: [fromInventoryId], references: [id])
  fromInventoryId Int
  toInventory     Inventory?   @relation("TransfersTo", fields: [toInventoryId], references: [id])
  toInventoryId   Int?
  quantity        Int
  type            TransferType @default(send)
  note            String?
  deliveryDate    DateTime?
  place           String?
  person          String?
  isDeleted       Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Payment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  amount    Float
  forMonth  String
  isPaid    Boolean  @default(false)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
